import Head from 'next/head'
import Image from 'next/image'
import styles from 'Q/styles/Home.module.css'
import cls from 'classnames';
import { useAccount, useContractRead } from 'wagmi';
import { useIsMounted } from './hooks/useIsMounted';
import termal from '../components/contracts/Termal';
import startupsHandler from '../components/contracts/StartupsHandler';
import investorHandler from '../components/contracts/InvestorsHandler';
import { contractKeys } from 'Q/components/engine/configuration';
import { useState, useEffect } from 'react';

export default function Home() {

    const mounted = useIsMounted();
    const { address, isConnected, isDisconnected } = useAccount();
    const [count, setCount] = useState(0);
    let [investorContractReadStatus, setInvestorContractReadStatus] = useState(false);
    let [startupContractReadStatus, setStartupContractReadStatus] = useState(false);
    let [isRegisteredInvestor, setisRegisteredInvestor] = useState("");
    let [isRegisteredStartup, setisRegisteredStartup] = useState("");

    const { data: ownerData } = useContractRead({
        address: contractKeys.termalKey,
        abi: termal.abi,
        functionName: "owner",
    })

    const isOwner = Boolean(ownerData === address);

    const connects = Boolean(isConnected);

    useEffect (() => {

        if (isConnected) {
            setInvestorContractReadStatus(true);
            setStartupContractReadStatus(true);
        }

        if (isDisconnected) {
            setInvestorContractReadStatus(false);
            setStartupContractReadStatus(false);
        }

        if (investorInfo !== undefined) {
            if (investorInfo[6] === true) {
                setisRegisteredInvestor("Investor");
            } else {
                setisRegisteredInvestor("");
            }
        }

        if (startupInfo !== undefined) {
            if (startupInfo[3] === true) {
                setisRegisteredStartup("Startup");
            } else {
                setisRegisteredStartup("");
            }
        }

        let timer = setTimeout(() => {
            setCount((count) => count + 1);
          }, 3000);
        
          return () => clearTimeout(timer)
    
    }, [count])

    const { data: investorInfo } = useContractRead({
        address: contractKeys.InvestorHandlerContractKey,
        abi: investorHandler.abi,
        functionName: 'investors',
        args: [address],
        watch: true,
        enabled: investorContractReadStatus,
    })

    const { data: startupInfo } = useContractRead({
        address: contractKeys.StartupHandlerContractKey,
        abi: startupsHandler.abi,
        functionName: 'startups',
        args: [address],
        watch: true,
        enabled: startupContractReadStatus,
    })

    return (
    <>
        <Head>
        <title>Termal</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        </Head>
        <div className="container-fluid text-center">
            <div className="row align-items-center">
                <div className="col-sm-6 col-12 p-2">
                    <img src="/assets/termal.png" alt='termal' className="img-fluid pt-3 pb-3" />
                </div>
                <div className="col-sm-6 col-12 px-5">
                    <div className="">
                        { mounted ? connects && (
                            <div>
                                <div className="row mt-5 mb-5 ms-1 me-1">
                                    <div>
                                        <h3>Welcome {isRegisteredInvestor + isRegisteredStartup}<p>{address}</p></h3>
                                    </div>
                                </div>
                            </div>
                        ) : (
                            <div></div>
                        )}
                    </div>
                    <div className="">
                        <h1><div className={styles.circ1}><img src="/assets/circulozona1.png" alt='circ1' className="img-fluid" /></div> Termal is a Venture Debt Fund on chain Liquidity Protocol which delivers smart working digital capital for founders 
                            and a yield for investors... without the typical bullshit of Venture Capital Funds.
                        </h1>
                        
                    </div>
                </div>
            </div>
            <div className={cls(styles.zona2, "row py-5 px-4")}>
                <div className="row align-items-start">
                    <div className={styles.circ2}><img src="/assets/circulozona1.png" alt='circ1' width={120} className="img-fluid" /></div>
                    <p className={cls(styles.textWhite, styles.textZona2, "text-start")}>Our Offer</p>
                </div>
                <div className="row text-start mb-3 align-items-center">
                    <div className="col-sm-6 col-12 ps-5">
                        <div>
                            <div className={styles.circ3}><img src="/assets/circulozona1.png" alt='circ1' width={40} className="img-fluid" /></div>
                            <p className={cls(styles.z2titles, "ps-2")}>Startups <img src="/assets/flecha.png" alt='circ1' width={40} className="img-fluid" /></p>
                        </div>
                        <div className={cls(styles.textWhite, styles.caja, "ms-4")}>
                            <p>1.-Fast and smart working crypto capital</p>
                            <p>2.-Founder friendly flexible loan</p>
                            <p>3.-Asset Tokenization</p>
                            <p>4.-In-House market</p>
                        </div>
                    </div>
                    <div className="col-sm-6 col-12">
                        <div>
                            <div className={styles.circ3}><img src="/assets/circulozona1.png" alt='circ1' width={40} className="img-fluid" /></div>
                            <p className={cls(styles.z2titles, styles.inv, "ps-2")}>Investors <img src="/assets/flecha.png" alt='circ1' width={40} className="img-fluid" /></p>
                        </div>
                        <div className={cls(styles.textWhite, styles.caja, "ms-4")}>
                            <p>1.-Short term interest yield</p>
                            <p>2.-Fractional tokenization ownership of fund</p>
                            <p className="mb-5">3.-In-House curated market</p>
                            <p></p>
                        </div>
                    </div>
                </div>
            </div>
            <div className={cls(styles.zona3, "row pt-5 pb-5 ps-5 pe-5 align-items-center")}>
                <div className="col-sm-2 col-12">
                    <img src="/assets/1st.png" alt='first' width={300} className="" />
                </div>
                <div className="col-sm-10 col-12">
                    <h3 className={styles.textWhite}>We are the first Venture debt fund completely exported to the Ethereum Blockchain... why? Because we got tired 
                        of paying ridiculous management fees, legal fees and bank comisions.
                    </h3>
                </div>
            </div>
            <div className={cls(styles.zona4, "row align-items-center")}>
                <div className="row text-center px-5 my-4">
                    <h1>Is it possible to migrate a traditional venture fund to the Blockchain? Well, come and see...</h1>
                </div>
                <div className="row mb-5">
                    <div className="col-md-6 col-12 my-2">
                        <a href="https://forms.gle/QqaB7p74bRxpmiUKA" ><img alt='regfounder' className={cls(styles.regfounder, "img-fluid")} /></a>
                    </div>
                    <div className="col-md-6 col-12 my-2">
                        <a href="https://forms.gle/DMqm8jywjSJKBCtc7"><img alt='regfounder' className={cls(styles.invfounder, "img-fluid")} /></a>
                    </div>
                </div>
            </div>
        </div>
    </>
    )
}
